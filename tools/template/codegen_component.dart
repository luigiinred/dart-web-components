// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

#library('codegen_component');

#import('dart:coreimpl');
#import('../../lib/html5parser/tokenkind.dart');
#import('../../lib/html5parser/htmltree.dart');
#import('../lib/world.dart');
#import('codegen.dart');
#import('compile.dart');
#import('utils.dart');

/** Web Component code generator. */
class CodegenComponent {
  static CodegenComponent _cg = const CodegenComponent();

  const CodegenComponent();

  /**
   * Generate the class for a Web Component
   * [filename] passed in would be filename part (sans '.extension').
   */
  static String generate(int parentsPathCount, String libraryName,
                         String filename, ElemCG ecg) {
    // TODO(terry): Validate that the filename matches identifier:
    //              a..z || A..Z || _ [a..z || A..Z || 0..9 || _]*
    if (libraryName.indexOf('.') >= 0) {
      world.fatal("Bad library - $libraryName");
    }

    StringBuffer buff = new StringBuffer();
    int injectId = 0;         // Inject function id

    buff.add(Codegen.header(filename, libraryName, parentsPathCount));

    if (ecg.includes.length > 0) {
      buff.add("/** Below import from script tag in HTML file. */\n");
      for (var includeName in ecg.includes) {
        buff.add("#import('$includeName');\n");
      }
      buff.add("\n");
    }

    int idx = 1;
    CGBlock cgb;
    while ((cgb = ecg.templateCG(idx++)) != null) {
      int boundElementCount = cgb.boundElementCount;
      Expect.isTrue(ecg.isWebComponent);

      buff.add(_cg._emitWebComponentClass(ecg.webComponentName,
               ecg.className,
               _cg._emitWCClassBody(ecg),
               boundElementCount,
               "    DocumentFragment templateRoot = new DocumentFragment();\n${
               cgb.codeBody}${Codegen.renderNodes}",
               templateExprFuncs: cgb.webComponentsCodeBody(ecg.expressions)));
    }

    return buff.toString();
  }

  String _emitWCClassBody(ElemCG ecg) {
    Expect.isTrue(ecg.isWebComponent);

    StringBuffer buff = new StringBuffer();

    buff.add("  /** User written code associated with this component 'item.html'. */\n");
    buff.add(ecg.userCode);

    buff.add("\n");

    buff.add("  /** Autogenerated from the template. */\n");

    return buff.toString();
  }

  String _emitWebComponentClass(String webComponentName,
                                String genClassName,
                                String classBodyUserCode,
                                int boundElementCount,
                                String renderBody,
                                [String templateExprFuncs = "",
                                 String injectFuncs = ""]) {
    List<String> myFuncs = [
    ];
    return Codegen.emitClass(genClassName, "Component",
        classBodyCode: classBodyUserCode,
        params: "root, elem",
        initializer: "super('$webComponentName', root, elem)",
        body: "",
        funcs: myFuncs,
        epilog: "${templateExprFuncs}$injectFuncs");
  }

}
